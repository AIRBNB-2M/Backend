name: deploy

on:
  push:
    paths:
      - ".github/workflows/**"
      - "src/**"
      - "build.gradle"
      - "settings.gradle"
      - "Dockerfile"
    branches:
      - main

jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: airbnb-backend
      OWNER_LC: airbnb-2m
    outputs:
      DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
      OWNER_LC: ${{ env.OWNER_LC }}
    steps:
      - uses: actions/checkout@v4
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: GHCR 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Owner 이름 소문자 변환
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"
      - name: 도커 빌드 및 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache,mode=max
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.makeTagAndRelease.outputs.tag_name }}
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    name: EC2에 배포
    runs-on: ubuntu-latest
    needs: [buildImageAndPush]
    env:
      DOCKER_IMAGE_NAME: ${{ needs.buildImageAndPush.outputs.DOCKER_IMAGE_NAME }}
      OWNER_LC: ${{ needs.buildImageAndPush.outputs.OWNER_LC }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: EC2 인스턴스 ID 가져오기
        id: get_instance_id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=dev-ec2-1" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: EC2에 명령어 실행 (SSM)
        uses: peterkimzz/aws-ssm-send-command@master
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ env.INSTANCE_ID }}
          working-directory: /
          comment: Deploy
          command: |
            # Base64로 전달된 Secrets 디코딩 후 .env 생성
            echo "${{ secrets.APP_ENV }}" | base64 --decode > /home/ec2-user/.env
            chmod 600 /home/ec2-user/.env
            
            echo ${{ secrets.GHCR_TOKEN  }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # 새 이미지 다운로드
            docker pull ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest
            
            # 기존 컨테이너 중지 & 제거
            docker stop app1 2>/dev/null || true
            docker rm app1 2>/dev/null || true
            
            # 새 이미지를 실행해서 새 컨테이너 생성
            docker run -d \
            --name app1 \
            --restart unless-stopped \
            -p 8080:8080 \
            --network common \
            --env-file /home/ec2-user/.env \
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest
            
            # 기존 이미지 제거
            docker rmi $(docker images -f "dangling=true" -q) || true
